##################################################################
##IN.CIBD_MULTI                                                 ##
##Script to deposits prequenched clusters at random locations   ##
##on substrate. Compute RDFs and voironoi after impaction       ##
##################################################################
##Dependencies  :                   				##
##Influences    : lammpstrj.*, post/*, log.*, *.restart         ##
##################################################################
## ver. : 2019-07-24, Syamal Praneeth Chilakalapudi, INT, KIT   ##
##Author Email    :syamalpraneeth@gmail.com                     ##
##################################################################

#------------------------------------------------------------------READ DATA AND VARIABLES
variable        pot string ${args}
next            args
variable        e1 string ${args}
next            args
variable        e2 string ${args}
next            args
variable        x equal ${args}
next            args
variable        y equal ${args}
next            args
variable        frac equal $y/($x+$y)
variable        en equal ${args}
next            args
variable        T2 equal ${args}
next            args
variable        siz equal ${args}
next		args
variable	subsiz equal ${args}

variable        th equal ${T2}/20
variable        clusfile string "data.clus_${siz}nm"
variable        subfile string "data.substrate_${subsiz}nm"

#----------------------------------------------------------------INTRODUCE SUBSTRATE
#atom_modify map yes
read_restart    restart.substrate_multi_${subsiz}nm #restart.sub

variable        BoxL equal lx
variable        dispX equal random(0,${BoxL},475414)
variable        dispY equal random(0,${BoxL},475414)
variable        top equal bound(all,zmax)

#----------------------------------------------------------------INTITIALIZE
neigh_modify    every 1 delay 0 check yes
pair_style      eam/fs
pair_coeff      * * ${pot} ${e1} ${e2} ${e1} ${e2}
mass            1 63.546
mass            2 91.224
#min_style       fire
#minimize        1e-10  1e-10  100  100
group           cluster empty
group		statd empty
group		film empty
group           film union film cluster
group		interface empty
group		core empty
group		cores empty
group		shell empty
group           eq empty

#----------------------------------------------------------------COMPUTES AND THERMO
compute         c1 statd temp
compute_modify  c1 dynamic/dof yes extra/dof 0
compute         c2 cluster temp
compute_modify  c2 dynamic/dof yes extra/dof 0
thermo_style    custom step pe ke press temp c_c2
thermo_modify   format float "% .6e"
thermo_modify   temp c1
thermo_modify	lost warn
thermo          ${th}

#-----------------------------------------------------------------FIXES FOR SUBSTRATE
fix             layrs all property/atom i_lyr
fix		corint all property/atom i_int
fix             dep all property/atom i_depquer

set             group buffr i_lyr 1
set             group statd i_lyr 2
set             group fixed i_lyr 3
group		substrate union buffr statd fixed
set		group substrate i_int 1
set		group cores i_int 2
set		group interface i_int 3
set		group substrate i_depquer 1
fix             f1 buffr nve
fix             f2 statd nvt temp 300 300 0.01
velocity        fixed set NULL NULL NULL
#velocity        fixed create 300 74657362 mom yes rot yes
#fix		f3 fixed nve
fix             f4 fixed setforce 0 0 NULL
variable	cnt equal bound(substrate,zmax)

#-------------------------------------------------------------------BALANCE
comm_style      tiled
balance         1.02 rcb weight group 1 fixed 0.05 out data/tmp.balance1_cibd_${siz}nm_${en}meV

#variable	dr equal floor(${T2}/5)
variable	th3 equal 1*${T2}
variable	dr equal ${th3}
dump            d2 all custom ${dr} data/lammpstrj.dep.cibd_${siz}nm_${en}meV id type x y z vx vy vz i_lyr i_int i_depquer
dump            d3 cluster custom ${dr} data/lammpstrj.dep.clus_${siz}nm_${en}meV id type x y z vx vy vz i_lyr i_int i_depquer
dump		d4 film custom ${dr} data/lammpstrj.dep.film_${siz}nm_${en}meV id type x y z vx vy vz i_lyr i_int i_depquer

#----------------------------------------------------DEPOSIT LOOP
reset_timestep	0
variable        Niter equal 100 #1000
variable a loop ${Niter}
label l1

#------------------------------------------------------------------1. introduce cluster
if "$a==1" then "variable ftop equal ${top}" "variable filmtop equal ${ftop}"		#Film top keeps changing withe every deposition. To account for growth of film

group           cluster id <= 0
read_data       ${clusfile} add append group cluster offset 2 0 0 0 0   #data file of cluster
#group           substrate subtract all cluster
group		film union film cluster
set             group cluster i_lyr 4

variable        clusdiaeval equal abs(bound(cluster,xmax)-bound(cluster,xmin))
variable        clusdia equal ${clusdiaeval}

variable        up equal 2*${clusdia}
#variable	up equal 1.4*${clusdia}					 #WRONG AND BAD FOR DYANMICS, good for testing

#print		${up}
#------------------------------------------------------------------2. fixes for cluster
#fix             f5 cluster nve
fix		f6 film nve

#------------------------------------------------------------------3. recolour
variable        Rs equal (${clusdia}/2)-2 # 10*${siz}-6
variable        z equal ${filmtop}+${clusdia}
displace_atoms  cluster move 0 0 ${z} units box
region          core sphere 0 0 ${z} ${Rs} side in
group           core region core
group           shell subtract cluster core
group           t1 type 1 3
group           t2 type 2 4
group           shellt1 intersect shell t1
group           shellt2 intersect shell t2
group           interface union shell interface
group           cores union core cores
set             group cores i_int 2
set             group interface i_int 3
region		core delete

#------------------------------------------------------------------4. equilibration decisions
#here a check is made in the nth deposition if n+1th cluster is in the neighborhood of unequilibrated atoms.
#If yes, an equilibration run is made.
#If not, deposition happens.

variable        dxx   equal  "v_dispX-0.5*v_BoxL"               #x and y coordinates of the n+1th deposited cluster
variable        dyy   equal  "v_dispY-0.5*v_BoxL"
variable        p equal ${dxx}					#coords assigned
variable        q equal ${dyy}
variable        Rq equal 3*(${clusdia}/2)
region          query sphere $p $q ${filmtop} ${Rq} side in
#group          query region query
#group          search union film query
variable        count equal count(film,query)                   #Check: Are there any unequilibrated cluster atoms in the spherical region around landing area of  n+1th deposited cluster?
 
#if count=0 there are no unequilibrated atoms in the vicinity
#if count>0 there are unequilibrated atoms
if "${count}==0" then "print 'no unequilibrated atoms in deposition zone'"
if "${count}>0" then "print '${count} uneq atoms in deposition zone'" "run ${T2}" "group equilibrated union equilibrated cluster" "set group equilibrated i_depquer 2"

#------------------------------------------------------------------5. set deposit conditions
variable        mclus equal mass(cluster)*(1.6605e-24)*(1e-3)   #metal units: m = grams/mol = g/(N_avogadro) = Kg/(N_avogadro*1000)
variable        E equal ${en}*(1.6e-19)*count(cluster)          #units: eV = 1.6e-19 Joules
variable        cvel equal (-1)*(sqrt(2*${E}/${mclus}))/100     #metal units: vel = 1 Angstr/ps = 100 m/s
#variable        dxx   equal  "v_dispX-0.5*v_BoxL"
#variable        dyy   equal  "v_dispY-0.5*v_BoxL"
#if "$a>1" then	"variable pprev equal $p" "variable qprev equal $q"
#variable        p equal ${dxx}
#variable        q equal ${dyy}

#variable	dist equal sqrt(($p-${pprev})^2+($q-${qprev})^2)
region		cylinder cylinder z $p $q ${siz} $(zlo) $(zhi)		#define cylinder at area of deposition of cluster
variable	cnt equal count(film,cylinder)
if "$a==1" then "variable pillarht equal 0"
if "$a>1 && ${cnt}>0" then "variable ftop equal bound(film,zmax,cylinder)" & #evaluate highest point of film below cluster
#"variable filmtopprev equal ${filmtop}" &
"variable filmtop equal ${ftop}" &
#"variable pillarht equal ${filmtop}-${filmtopprev}"
#Preventing formation of pillaring. I think this will avoid pores.
if "${pillarht}>${clusdia}" then "delete_atoms cluster" "print 'This dep may form pillars, re-attempting deposit'" "jump in.cluster.multi l1"
"if "${dist}<=${clusdia}" then "delete_atoms cluster" "print 'This dep may form pillars, re-attempting deposit'" "jump in.cluster.multi l1""

variable        hfheight equal $(lz)/2
variable        diff equal $(zhi)-${filmtop}
print           ${diff}
if "${diff}<${up}" then "change_box      all z delta 0 ${up} units box"

variable        dzz   equal ${filmtop}+1.4*${clusdia}
variable        flyT equal (${dzz}-${filmtop})/(abs(${cvel})*(0.001)) #this is an indirect way of saying that the cluster dep height is always 1.4*cluster diameteri
variable        runT equal "floor(v_flyT)+100" #"floor(v_flyT+v_T2)"

#create_atoms	3 single 0 0 ${filmtop}
#write_dump	all atom dump.atom

variable	thet1 equal random(0,360,458784)			#evaluate 3 Euler angles
variable	thet2 equal random(0,360,879869)
variable	thet3 equal random(0,360,387224)
variable        zcom equal xcm(cluster,z)
variable        zmove   equal ${filmtop}+1.4*${clusdia}-${zcom}	#move cluster 1.4 diameter lengths from surface
displace_atoms  cluster move $p $q ${zmove} units box
variable k equal xcm(cluster,x)
variable l equal xcm(cluster,y)
variable m equal xcm(cluster,z)
displace_atoms	cluster rotate $k $l $m 1 0 0 ${thet1}			#rotate cluster by 3 Euler Angles
write_dump all atom dump2.atom
displace_atoms  cluster rotate $k $l $m 0 1 0 ${thet2}
write_dump all atom dump3.atom
displace_atoms  cluster rotate $k $l $m 0 0 1 ${thet3}
write_dump all atom dump4.atom

velocity        cluster create 300 74657362 mom yes rot yes		#set temperature of cluster
velocity        cluster set 0 0 ${cvel} units box

variable	boxht equal $(zhi)
print           "New top of film for iteration $a is ${filmtop}" append data/filmtop.log screen yes
print           "approx clus diameter ${clusdia} angstrom"
print           'deposit height ${dzz} Angstrom'
print		'box z+ height is: ${boxht}'
print           'cvel is ${cvel} Angstrom/picosecs'
print           'mclus is ${mclus} grams/mol'
print           'Energy is ${en} meV/atom'

#-------------------------------------------------------------------DEPOSIT
run		${runT}

#variable        filmtop equal bound(film,zmax)
write_restart   data/restart.deposit_${Niter}
print           "Successful run iteration $a of ${Niter} at $(step)" append data/deposit_success.log screen yes #for data recovery

#-------------------------------------------------------------------CLEAN UP AFTER DEPOSIT
group           film union film cluster
group           cluster clear
group           substrate clear

region		query delete
region		cylinder delete
reset_ids

#if "$a<2" then	"compute c3 all cluster/atom 3.5"
#if "$a<2" then 	"compute c4 all reduce max c_c3"
#dump		d all custom 1 dump.cluscomp.out c_c3[*]
#if "$a<2" then	"thermo_style	custom c_c4"
#run		0
#variable	maxc equal c_c4
#variable	clusID atom c_c3
#print		${maxc}
#variable	cluscrit atom floor(c_c3/${maxc})
#run		0
#group		del variable cluscrit
#delete_atoms	group del
#undump		d
next		a
jump            in.cibd_multi l1

if "${count}>0" then "run ${T2}" "group equilibrated union equilibrated film" "set group equilibrated i_depquer 2"

write_restart   data/restart.cibd_${e1}${x}${e2}${y}_${siz}nm_${en}meV
#unfix		layrs
write_data	data/data.cibd_${e1}${x}${e2}${y}_${siz}nm_${en}meV

print		'Settings Summary:'
print           'deposit height ${dzz} Angstrom'
print		'box z+ height is: ${boxht}'
print           'cvel is ${cvel} Angstrom/picosecs'
print           'mclus is ${mclus} grams/mol'
print           'Energy is ${en} meV/atom'
#----------------------------------------------------------GROUPS AND COMPUTES
